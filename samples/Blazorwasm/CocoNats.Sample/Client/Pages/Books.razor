@page "/Books"
@using CocoNats.Sample.Shared.Books
@using NATS.Client.Core

@inject NatsConnection NatsConnection

<PageTitle>Books</PageTitle>

<h1>Books</h1>

<p>This component demonstrates CRUD operations for books.</p>

<button class="btn btn-primary" @onclick="() => ShowBookForm(null)">Add New Book</button>

@if (_books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table mt-4">
        <thead>
            <tr>
                <th>Title</th>
                <th>Type</th>
                <th>Author</th>
                <th>Year</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in _books)
            {
                <tr>
                    <td><a href="javascript:void(0)" @onclick="() => ShowBookDetail(book)">@book.Title</a></td>
                    <td>@book.Type.ToString()</td>
                    <td>@book.Author</td>
                    <td>@book.Year</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => ShowBookForm(book)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteBook(book.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showForm)
{
    <div class="modal" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(currentBook.Id == Guid.Empty ? "Add New Book" : "Edit Book")</h5>
                    <button type="button" class="btn-close" @onclick="CloseForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentBook" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="title" class="form-label">Title</label>
                            <InputText id="title" class="form-control" @bind-Value="currentBook.Title" />
                        </div>
                        <div class="mb-3">
                            <label for="type" class="form-label">Type</label>
                            <InputSelect id="type" class="form-control" @bind-Value="currentBook.Type">
                                @foreach (var type in Enum.GetValues(typeof(BookType)))
                                {
                                    <option value="@type">@type</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="mb-3">
                            <label for="author" class="form-label">Author</label>
                            <InputText id="author" class="form-control" @bind-Value="currentBook.Author" />
                        </div>
                        <div class="mb-3">
                            <label for="year" class="form-label">Year</label>
                            <InputNumber id="year" class="form-control" @bind-Value="currentBook.Year" />
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseForm">Cancel</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (showDetail)
{
    <div class="modal" style="display:block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Book Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseDetail"></button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@detailBook.Title</h5>
                            <h6 class="card-subtitle mb-2 text-muted">By @detailBook.Author</h6>
                            <p class="card-text">Type: @detailBook.Type</p>
                            <p class="card-text">Published in @detailBook.Year</p>
                            <p class="card-text">ID: @detailBook.Id</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDetail">Close</button>
                    <button type="button" class="btn btn-info" @onclick="() => 
                        {
                            ShowBookForm(detailBook);
                            showDetail = false;
                        }">Edit</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private List<BookDto>? _books;
    private bool showForm = false;
    private bool showDetail = false;
    private BookDto currentBook = new();
    private BookDto detailBook = new();
    private bool isEditMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        try
        {
            var response = await NatsConnection.RequestAsync<object, GetBooksResponse>("book.get", new object());
            _books = response.Data?.Books ?? new List<BookDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading books: {ex.Message}");
            _books = new List<BookDto>();
        }
    }

    private void ShowBookForm(BookDto? book)
    {
        if (book == null)
        {
            currentBook = new BookDto();
            isEditMode = false;
        }
        else
        {
            currentBook = new BookDto
            {
                Id = book.Id,
                Title = book.Title,
                Type = book.Type,
                Author = book.Author,
                Year = book.Year,
            };
            isEditMode = true;
        }
        showDetail = false;
        showForm = true;
    }

    private async Task ShowBookDetail(BookDto book)
    {
        try
        {
            var request = new GetBookRequest
            {
                Id = book.Id
            };
            var response = await NatsConnection.RequestAsync<GetBookRequest, GetBookResponse>("book.get.detail", request);

            if (response.Data?.Book != null)
            {
                detailBook = response.Data.Book;   
            }
            else
            {
                detailBook = book;
            }
            showForm = false;
            showDetail = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading book details: {ex.Message}");
            detailBook = book;
            showForm = false;
            showDetail = true;
        }
    }

    private void CloseForm()
    {
        showForm = false;
    }

    private void CloseDetail()
    {
        showDetail = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditMode)
            {
                var request = new UpdateBookRequest
                {
                    Book = currentBook
                };
                await NatsConnection.RequestAsync<UpdateBookRequest, UpdateBookResponse>("book.put", request);
            }
            else
            {
                var request = new CreateBookRequest
                {
                    Title = currentBook.Title,
                    Type = currentBook.Type,
                    Author = currentBook.Author,
                    Year = currentBook.Year
                };
                await NatsConnection.RequestAsync<CreateBookRequest, CreateBookResponse>("book.post", request);
            }

            showForm = false;
            await LoadBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving book: {ex.Message}");
            // Here you could add error handling UI feedback
        }
    }

    private async Task DeleteBook(Guid id)
    {
        try
        {
            var request = new DeleteBookRequest { Id = id };
            await NatsConnection.RequestAsync<DeleteBookRequest, DeleteBookResponse>("book.delete", request);
            await LoadBooks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting book: {ex.Message}");
            // Here you could add error handling UI feedback
        }
    }
}