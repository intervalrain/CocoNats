using System.Reflection;

using CocoNats.Abstractions.Services;
using CocoNats.Core.Handlers;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace CocoNats.Core;

public static class DependencyInjection
{
    public static IServiceCollection AddCocoNats(this IServiceCollection services, params Assembly[] assemblies)
    {
        if (assemblies == null || assemblies.Length == 0)
        {
            assemblies = AppDomain.CurrentDomain.GetAssemblies();
        }
        
        var serviceTypes = assemblies
            .SelectMany(a => a.GetTypes())
            .Where(t => 
                t is { IsInterface: false, IsClass: true, IsAbstract: false } && 
                typeof(INatsService).IsAssignableFrom(t))
            .ToList();

        foreach (var serviceType in serviceTypes)
        {
            if (!services.Any(s => s.ServiceType == serviceType))
            {
                services.AddSingleton(serviceType);
            }
            var handleType = typeof(AutoGeneratedServiceHandler<>).MakeGenericType(@serviceType);
            services.AddSingleton(typeof(IHostedService), handleType);
        }

        return services;
    }
}