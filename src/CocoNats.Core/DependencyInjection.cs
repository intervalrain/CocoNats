using System.Reflection;

using CocoNats.Abstractions.Services;
using CocoNats.Core.Handlers;

using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

namespace CocoNats.Core;

public static class DependencyInjection
{
    public static IServiceCollection AddCocoNats(this IServiceCollection services, params Assembly[] assemblies)
    {
        if (assemblies == null || assemblies.Length == 0)
        {
            assemblies = AppDomain.CurrentDomain.GetAssemblies();
        }
        
        var interfaces = assemblies
            .SelectMany(a => a.GetTypes())
            .Where(t => !t.IsInterface &&
                        t.IsClass &&
                        !t.IsAbstract &&
                        t != typeof(INatsService) &&
                        typeof(INatsService).IsAssignableFrom(t))
            .ToList();

        foreach (var @interface in interfaces)
        {
            var handleType = typeof(AutoGeneratedServiceHandler<>).MakeGenericType(@interface);
            services.AddSingleton(typeof(IHostedService), handleType);
        }

        return services;
    }
}